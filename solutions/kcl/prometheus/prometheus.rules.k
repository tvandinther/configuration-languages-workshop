"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex

schema PrometheusRules:
    r"""
    Prometheus rules file

    Attributes
    ----------
    groups : [any] | PrometheusRulesGroupsItems0, optional
    """

    groups?: [any] | PrometheusRulesGroupsItems0

schema AlertingRule:
    r"""
    AlertingRule

    Attributes
    ----------
    alert : str, required
        The name of the alert. Must be a valid metric name.
    expr : any, required
        The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.
    $for : str, optional
        Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.
    keep_firing_for : str, optional
        How long an alert will continue firing after the condition that triggered it has cleared.
    labels : any | Labels, optional
        Labels to add or overwrite for each alert.
    annotations : any | Annotations, optional
        Annotations to add to each alert.
    """

    alert: str
    expr: any
    $for?: str
    keep_firing_for?: str
    labels?: any | Labels
    annotations?: any | Annotations

    check:
        len($for) >= 1 if $for
        regex.match($for, r"^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$") if $for
        len(keep_firing_for) >= 1 if keep_firing_for
        regex.match(keep_firing_for, r"^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$") if keep_firing_for

schema Annotations:
    r"""
    Annotations to add to each alert.
    """

    [key: str]: str

    check:
        regex.match(key, r"^[a-zA-Z_][a-zA-Z0-9_]*$")

schema Labels:
    r"""
    Labels to add or overwrite for each alert.
    """

    [key: str]: str

    check:
        regex.match(key, r"^[a-zA-Z_][a-zA-Z0-9_]*$")

schema PrometheusRulesGroupsItems0:
    r"""
    PrometheusRulesGroupsItems0

    Attributes
    ----------
    name : str, required
        The name of the group. Must be unique within a file.
    interval : str, optional
        How often rules in the group are evaluated.
    labels : any | Labels, optional
        Labels to add or overwrite before storing the result for its rules. Labels defined in <rule> will override the key if it has a collision.
    limit : int, optional, default is 0
        Limit the number of alerts an alerting rule and series a recording rule can produce. 0 is no limit.
    rules : [any] | RecordingRule | AlertingRule, optional
    """

    name: str
    interval?: str
    labels?: any | Labels
    limit?: int = 0
    rules?: [any] | RecordingRule | AlertingRule

    check:
        len(interval) >= 1 if interval
        regex.match(interval, r"^((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)$") if interval

schema RecordingRule:
    r"""
    RecordingRule

    Attributes
    ----------
    record : str, required
        The name of the time series to output to. Must be a valid metric name.
    expr : any, required
        The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and the result recorded as a new set of time series with the metric name as given by 'record'.
    labels : any | Labels, optional
        Labels to add or overwrite before storing the result.
    """

    record: str
    expr: any
    labels?: any | Labels

